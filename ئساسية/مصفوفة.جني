ئعلن مصفوفة.ئستزح (منوع عنصر) ك عدد:
	يختصر unshift؛
تم
ئعلن مصفوفة.رتتب (دالة مرتب؟ (منوع، منوع) ك عدد) ك منوع[]:
	يختصر sort؛
تم
ئعلن مصفوفة.رششح (دالة مرشح (منوع، عدد، منوع[]) ك منطق، منوع نفسه؟) ك منوع[]:
	يختصر filter؛
تم
ئعلن مصفوفة.مفتاحين () ك عدد[]:
	دع مفتا = هدا['keys']()؛
	ئرجع [...مفتا]؛
تم
ئعلن مجال (عدد بداية، عدد نهاية) ك عدد[]:
	عدد[] مصف = مصفوفة(نهاية - بداية+1).مفتاحين()؛
	مصف = مصف.نففد(دالة (عدد عنصر): عنصر + بداية)؛
	ئرجع مصف؛
تم
ئعلن مصفوفة.بعضها (دالة مختبر (منوع، عدد، منوع[]) ك منطق، منوع نفسه؟) ك منطق:
	يختصر some؛
تم
ئعلن مصفوفة.ئزح () ك منوع:
	يختصر shift؛
تم
ئعلن مصفوفة.قيمات () ك منوع[]:
	يختصر values؛
تم
ئعلن مصفوفة.ئعكس () ك منوع[]:
	يختصر reverse؛
تم
ئعلن مصفوفة.طببق (دالة منففد (منوع، عدد، منوع[]) ك منوع، منوع نفسه؟) ك منوع[]:
	يختصر map؛
تم
ئعلن مصفوفة.قططع (عدد بد؟، عدد نه؟) ك منوع[]:
	يختصر slice؛
تم
ئعلن مصفوفة.ئنشئمن (مصفوفة ئصل، دالة ئجرائ؟ (منوع، عدد) ك منوع، منوع نفسه؟) ك منوع[]:
	يختصر from؛
تم
ئعلن مصفوفة.ئدفع (مجهول عنصر) ك عدد:
	يختصر push؛
تم
ئعلن مصفوفة.ئدمج (نصية فاصل؟) ك نصية:
	يختصر join؛
تم
ئعلن مصفوفة.ئسحب () ك منوع:
	يختصر pop؛
تم
ئعلن مصفوفة.ئوجد (دالة باحت (منوع، عدد، منوع[]) ك منطق، منوع نفسه؟) ك منوع:
	يختصر find؛
تم
ئعلن مصفوفة.ئجدل (عدد بداية، عدد كميحدف؟ = عدم، منوع[] عنصرين؟ = عدم) ك منوع[]:
	ئدا (كميحدف لا= عدم) وو (عنصرين لا= عدم):
		ئرجع هدا['splice'](بداية، كميحدف، ...عنصرين)؛
	وئلا ئدا كميحدف لا= عدم:
		ئرجع هدا['splice'](بداية، كميحدف)؛
	وئلا ئدا عنصرين لا= عدم:
		ئرجع هدا['splice'](بداية، ...عنصرين)؛
	وئلا:
		ئرجع هدا['splice'](بداية)؛
	تم
تم
ئعلن مصفوفة.نففد (دالة منففد (منوع، عدد، منوع[]) ك منوع، منوع نفسه؟) ك منوع[]:
	يختصر map؛
تم
ئعلن مصفوفة.يتضمن (مجهول عنصر) ك منطق:
	يختصر includes؛
تم
ئعلن مصفوفة (عدد م_طول؟):
	يختصر Array؛
	يملك عدد طول يختصر length؛
تم
ئعلن مصفوفة.ردموضع (مجهول عنصر، عدد يبدئمن؟) ك عدد:
	يختصر indexOf؛
تم
ئورد Array من '//'؛
ئورد عدد من ئساسية.عدد؛
ئورد منطق من ئساسية.منطق؛
ئورد نصية من '//'؛